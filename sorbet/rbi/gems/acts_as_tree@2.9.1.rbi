# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `acts_as_tree` gem.
# Please instead update this file by running `bin/tapioca gem acts_as_tree`.


# source://acts_as_tree//lib/acts_as_tree/active_record/acts/tree.rb#3
module ActiveRecord
  class << self
    # source://activerecord/7.1.4.1/lib/active_record.rb#342
    def action_on_strict_loading_violation; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#342
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#422
    def allow_deprecated_singular_associations_name; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#422
    def allow_deprecated_singular_associations_name=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#335
    def application_record_class; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#335
    def application_record_class=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#263
    def async_query_executor; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#263
    def async_query_executor=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#317
    def before_committed_on_all_records; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#317
    def before_committed_on_all_records=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#314
    def belongs_to_required_validates_foreign_key; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#314
    def belongs_to_required_validates_foreign_key=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#323
    def commit_transaction_on_non_local_return; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#323
    def commit_transaction_on_non_local_return=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#209
    def db_warnings_action; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#211
    def db_warnings_action=(action); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#236
    def db_warnings_ignore; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#236
    def db_warnings_ignore=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#192
    def default_timezone; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#196
    def default_timezone=(default_timezone); end

    # source://activerecord/7.1.4.1/lib/active_record/deprecator.rb#4
    def deprecator; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#177
    def disable_prepared_statements; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#177
    def disable_prepared_statements=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#476
    def disconnect_all!; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#382
    def dump_schema_after_migration; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#382
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#392
    def dump_schemas; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#392
    def dump_schemas=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#465
    def eager_load!; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#361
    def error_on_ignored_order; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#361
    def error_on_ignored_order=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#454
    def generate_secure_token_on; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#454
    def generate_secure_token_on=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#286
    def global_executor_concurrency; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#278
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#266
    def global_thread_pool_async_query_executor; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#290
    def index_nested_attribute_errors; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#290
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#183
    def lazily_load_schema_cache; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#183
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#245
    def legacy_connection_handling=(_); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#308
    def maintain_test_schema; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#308
    def maintain_test_schema=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#457
    def marshalling_format_version; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#461
    def marshalling_format_version=(value); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#373
    def migration_strategy; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#373
    def migration_strategy=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#425
    def query_transformers; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#425
    def query_transformers=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#305
    def queues; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#305
    def queues=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#440
    def raise_int_wider_than_64bit; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#440
    def raise_int_wider_than_64bit=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#311
    def raise_on_assign_to_attr_readonly; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#311
    def raise_on_assign_to_attr_readonly=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#242
    def reading_role; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#242
    def reading_role=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#320
    def run_after_transaction_callbacks_in_order_defined; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#320
    def run_after_transaction_callbacks_in_order_defined=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#189
    def schema_cache_ignored_tables; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#189
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#353
    def schema_format; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#353
    def schema_format=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#395
    def suppress_multiple_database_warning; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#402
    def suppress_multiple_database_warning=(value); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#367
    def timestamped_migrations; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#367
    def timestamped_migrations=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#432
    def use_yaml_unsafe_load; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#432
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#298
    def verbose_query_logs; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#298
    def verbose_query_logs=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#415
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#415
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record/version.rb#7
    def version; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#332
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#332
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#239
    def writing_role; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#239
    def writing_role=(_arg0); end

    # source://activerecord/7.1.4.1/lib/active_record.rb#447
    def yaml_column_permitted_classes; end

    # source://activerecord/7.1.4.1/lib/active_record.rb#447
    def yaml_column_permitted_classes=(_arg0); end
  end
end

# source://acts_as_tree//lib/acts_as_tree/active_record/acts/tree.rb#4
module ActiveRecord::Acts; end

# source://acts_as_tree//lib/acts_as_tree/active_record/acts/tree.rb#5
module ActiveRecord::Acts::Tree
  include ::ActsAsTree
  extend ::ActsAsTree::ClassMethods

  mixes_in_class_methods ::ActsAsTree::ClassMethods

  class << self
    # @private
    #
    # source://acts_as_tree//lib/acts_as_tree/active_record/acts/tree.rb#8
    def included(base); end
  end
end

# source://acts_as_tree//lib/acts_as_tree/version.rb#1
module ActsAsTree
  mixes_in_class_methods ::ActsAsTree::ClassMethods

  class << self
    # @private
    #
    # source://acts_as_tree//lib/acts_as_tree.rb#11
    def included(base); end
  end
end

# Specify this +acts_as+ extension if you want to model a tree structure
# by providing a parent association and a children association. This
# requires that you have a foreign key column, which by default is called
# +parent_id+.
#
#   class Category < ActiveRecord::Base
#     include ActsAsTree
#
#     acts_as_tree :order => "name"
#   end
#
#   Example:
#   root
#    \_ child1
#         \_ subchild1
#         \_ subchild2
#
#   root      = Category.create("name" => "root")
#   child1    = root.children.create("name" => "child1")
#   subchild1 = child1.children.create("name" => "subchild1")
#
#   root.parent   # => nil
#   child1.parent # => root
#   root.children # => [child1]
#   root.children.first.children.first # => subchild1
#
# In addition to the parent and children associations, the following
# instance methods are added to the class after calling
# <tt>acts_as_tree</tt>:
# * <tt>siblings</tt> - Returns all the children of the parent, excluding
#                       the current node (<tt>[subchild2]</tt> when called
#                       on <tt>subchild1</tt>)
# * <tt>self_and_siblings</tt> - Returns all the children of the parent,
#                                including the current node (<tt>[subchild1, subchild2]</tt>
#                                when called on <tt>subchild1</tt>)
# * <tt>ancestors</tt> - Returns all the ancestors of the current node
#                        (<tt>[child1, root]</tt> when called on <tt>subchild2</tt>)
# * <tt>root</tt> - Returns the root of the current node (<tt>root</tt>
#                   when called on <tt>subchild2</tt>)
#
# source://acts_as_tree//lib/acts_as_tree.rb#54
module ActsAsTree::ClassMethods
  # Configuration options are:
  #
  # * <tt>primary_key</tt> - specifies the column name for relations
  #                          (default: +id+)
  # * <tt>foreign_key</tt> - specifies the column name to use for tracking
  #                          of the tree (default: +parent_id+)
  # * <tt>order</tt> - makes it possible to sort the children according to
  #                    this SQL snippet.
  # * <tt>counter_cache</tt> - keeps a count in a +children_count+ column
  #                            if set to +true+ (default: +false+). Specify
  #                            a custom column by passing a symbol or string.
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#66
  def acts_as_tree(options = T.unsafe(nil)); end
end

# source://acts_as_tree//lib/acts_as_tree.rb#249
module ActsAsTree::InstanceMethods
  # Returns list of ancestors, starting from parent until root.
  #
  #   subchild1.ancestors # => [child1, root]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#253
  def ancestors; end

  # Returns list of descendants, starting from current node, not including current node.
  #
  #   root.descendants # => [child1, child2, subchild1, subchild2, subchild3, subchild4]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#262
  def descendants; end

  # Returns all the nodes at the same level in the tree as the current node.
  #
  #  root1child1.generation # => [root1child2, root2child1, root2child2]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#299
  def generation; end

  # Returns true if node has no children, false otherwise
  #
  #   subchild1.leaf? # => true
  #   child1.leaf?    # => false
  #
  # @return [Boolean]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#356
  def leaf?; end

  # Returns the level (depth) of the current node unless level is a column on the node.
  # Allows backwards compatibility with older versions of the gem.
  # Allows integration with apps using level as a column name.
  #
  #  root1child1.level # => 1
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#322
  def level; end

  # Returns the root node of the tree.
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#276
  def root; end

  # Returns true if node has no parent, false otherwise
  #
  #   subchild1.root? # => false
  #   root.root?      # => true
  #
  # @return [Boolean]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#348
  def root?; end

  # Returns ancestors and current node itself.
  #
  #   subchild1.self_and_ancestors # => [subchild1, child1, root]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#340
  def self_and_ancestors; end

  # Returns children (without subchildren) and current node itself.
  #
  #   root.self_and_children # => [root, child1]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#333
  def self_and_children; end

  # Returns list of descendants, starting from current node, including current node.
  #
  #   root.self_and_descendants # => [root, child1, child2, subchild1, subchild2, subchild3, subchild4]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#271
  def self_and_descendants; end

  # Returns a reference to the current node and all the nodes at the same level as it in the tree.
  #
  #  root1child1.self_and_generation # => [root1child1, root1child2, root2child1, root2child2]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#306
  def self_and_generation; end

  # Returns all siblings and a reference to the current node.
  #
  #   subchild1.self_and_siblings # => [subchild1, subchild2]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#292
  def self_and_siblings; end

  # Returns all siblings of the current node.
  #
  #   subchild1.siblings # => [subchild2]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#285
  def siblings; end

  # Returns the level (depth) of the current node
  #
  #  root1child1.tree_level # => 1
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#313
  def tree_level; end

  private

  # source://acts_as_tree//lib/acts_as_tree.rb#363
  def update_parents_counter_cache; end
end

# source://acts_as_tree//lib/acts_as_tree/railtie.rb#3
class ActsAsTree::Railtie < ::Rails::Railtie; end

# source://acts_as_tree//lib/acts_as_tree.rb#164
module ActsAsTree::TreeView
  # show records in a tree view
  # Example:
  # root
  #  |_ child1
  #  |    |_ subchild1
  #  |    |_ subchild2
  #  |_ child2
  #       |_ subchild3
  #       |_ subchild4
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#175
  def tree_view(label_method = T.unsafe(nil), node = T.unsafe(nil), level = T.unsafe(nil)); end
end

# source://acts_as_tree//lib/acts_as_tree.rb#195
module ActsAsTree::TreeWalker
  # Traverse the tree and call a block with the current node and current
  # depth-level.
  #
  # options:
  #   algorithm:
  #     :dfs for depth-first search (default)
  #     :bfs for breadth-first search
  #   where: AR where statement to filter certain nodes
  #
  # The given block sets two parameters:
  #   first: The current node
  #   second: The current depth-level within the tree
  #
  # Example of acts_as_tree for model Page (ERB view):
  # <% Page.walk_tree do |page, level| %>
  #   <%= link_to "#{' '*level}#{page.name}", page_path(page) %><br />
  # <% end %>
  #
  # There is also a walk_tree instance method that starts walking from
  # the node it is called on.
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#217
  def walk_tree(options = T.unsafe(nil), &block); end

  private

  # source://acts_as_tree//lib/acts_as_tree.rb#235
  def walk_tree_bfs(where = T.unsafe(nil), node = T.unsafe(nil), level = T.unsafe(nil), &block); end

  # @yield [node, level]
  #
  # source://acts_as_tree//lib/acts_as_tree.rb#241
  def walk_tree_dfs(where = T.unsafe(nil), node = T.unsafe(nil), level = T.unsafe(nil), &block); end

  class << self
    # @private
    #
    # source://acts_as_tree//lib/acts_as_tree.rb#223
    def extended(mod); end
  end
end

# source://acts_as_tree//lib/acts_as_tree/version.rb#2
ActsAsTree::VERSION = T.let(T.unsafe(nil), String)
